
# 문제 - 크레인 인형뽑기 게임
# 2019 카카오 개발자 겨울 인턴십

# 연습
# 손으로 그려보며 생각해보기
# -- 인형이 없는 곳에서는? 이라는 의문이 생겨 문제를 다시 꼼꼼히 읽어보게됨
# -- 직관적으로 이해할 수 있게됨
# -- 문자는 숫자로 변형시켜서 생각을 해보자


# 1. 문제 내용
# N X N의 인형뽑기 영역이 있고
# 뽑은 인형을 담는 바구니 영역이 있음
# 인형을 뽑아서 바구니 영역에 담을 때
# 같은 인형이 2개 연속되어 뽑히면 인형이 터트려져 바구니에서 사라짐
# 터트려져 사라진 인형의 개수를 구하는 문제!

# 2. 핵심 포인트
# 같은 인형이 2개 연속되어 뽑히면 사라진다 - 짝수의 개수로 인형이 사라지겠군
# board 배열의 의미 - 인형이 담겨 있는 2차원 배열
# 인형의 경우 1 ~ 100가지의 종류가 존재
# move 배열의 의미 - 크레인이 가로 길이 N의 범위 안에서 움직임

# 3. 세부 조건
# 인형이 없는 곳(원소가 0)에서는 아무런 일이 일어나지 않음

# 플로우 - 손으로 그려보자
# 1. moves 컨트롤
# 2. board 탐색
# 3. basket 푸시

# 4. 플로우
# moves를 순차적으로 돌면서 (moves의 길이만큼 반복)
# 해당 moves에 맞는 라인(두번째 인덱스에 해당하는 부분)에 가서 인형을 뽑는다.
# -- N만큼의 반복문을 돌리면서 인형을 체크한다.
# --- 0이면 skip
# --- 0이 아니면(인형이 있다면)
# -----해당 값을 basket에 추가하고
# -----추가할 때 이전에 들어있는 값(배열의 가장 끝 값)과 비교하여 같으면
# -------끝에 있는 값을 pop하고 카운트를 2만큼 증가시킨다.
# -----다르면 끝에 추가한다.
# --- 해당 부분의 값을 0으로 바꾼다.
# --- break하고 나와서 moves의 커서를 옮긴다.


# -- 1. i 와 line의 순서를 바꾸어 써서 오답처리 되었음
# -- 2. print() 혹시 사용했다면 무조건 빼자 - 출력 크기 초과로 오답될 수 있음
# -- 3. 배열은 인덱스 컨트롤이 하나의 중요 요소인 듯
# -- 풀이시간: 약 1시간 이내 (생각하는데 시간이 걸렸지 + 풀이를 작성하는데는 수도코드 작성한대로 금방 작성)

# 좋은아이디어 -> board[i][line] != 0 인 경우만 처리하면 좋지 않을까

def solution(board, moves):
    # board는 n x n 크기의 배열
    # moves는 크레인의 움직임 (n의 길이)

    basket = []  # 뽑은 인형을 담을 배열
    bomb_count = 0  # 터트린 인형 개수

    # 크레인 배열의 크기만큼, 움직인 만큼 반복
    for cursor in range(len(moves)):

        line = moves[cursor] - 1  # 인덱스로 비교해야해서 1만큼 빼줌

        for i in range(len(board)):
            if board[i][line] == 0:
                continue
            else:
                if basket:  # 바구니가 인형 있으면
                    # 마지막에 들어간 인형과 들어갈 인형이 같은 인형이면 터트려
                    if basket[len(basket)-1] == board[i][line]:
                        basket.pop()  # bomb
                        bomb_count += 2  # 카운트는 항상 짝이니까 2씩 증가
                    else:
                        basket.append(board[i][line])
                else:  # 바구니에 인형 하나도 없으면
                    basket.append(board[i][line])

                board[i][line] = 0
                break

    return bomb_count
